/**
 *      _________   _____________________  ____  ______
 *     / ____/   | / ___/_  __/ ____/ __ \/ __ \/ ____/
 *    / /_  / /| | \__ \ / / / /   / / / / / / / __/
 *   / __/ / ___ |___/ // / / /___/ /_/ / /_/ / /___
 *  /_/   /_/  |_/____//_/  \____/\____/_____/_____/
 *
 *  http://www.inf.ethz.ch/personal/markusp/teaching/
 *  How to Write Fast Numerical Code 263-2300 - ETH Zurich
 *  Copyright (C) 2015  Alen Stojanov      (astojanov@inf.ethz.ch)
 *                      Daniele Spampinato (daniele.spampinato@inf.ethz.ch)
 *                      Gagandeep Singh    (gsingh@inf.ethz.ch)
 *	                    Markus Pueschel    (pueschel@inf.ethz.ch)
 *	Copyright (C) 2013  Georg Ofenbeck     (ofenbeck@inf.ethz.ch)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program. If not, see http://www.gnu.org/licenses/.
 */

#include <stdlib.h>
#include "xmmintrin.h"
#include "comp.h"

void simd_conjugate_transpose (complex_t in[2][2], complex_t out[2][2])
{
	float * m = (float *) & in[0][0];
	float * n = (float *) &out[0][0];
	__m128 mask = _mm_set_ps(-1, 1, -1, 1);

	__m128 p0 = _mm_loadu_ps (m);
	__m128 q0 = _mm_loadu_ps (m + 4);

	__m128 p1 = _mm_mul_ps(p0, mask);
	__m128 q1 = _mm_mul_ps(q0, mask);

	__m128 p2 = _mm_shuffle_ps(p1, q1, _MM_SHUFFLE(1,0,1,0));
	__m128 q2 = _mm_shuffle_ps(p1, q1, _MM_SHUFFLE(3,2,3,2));

	_mm_storeu_ps(n, p2);
	_mm_storeu_ps(n + 4, q2);

}

void simd_pairs_multiplications (float * x, float * y, float * z, size_t n)
{
	int i; __m128 mask = _mm_set_ps(2.f, 2.f, 2.f, 2.f);

	for (i = 0; i < 2 * n; i += 8) {

		__m128 x0, x1, y0, y1, z0, z1;
		__m128 l0, h0, l1, h1, h0l1, l1l0, h0h1, mh0h1, h1l0, a0, a1;

		// Loads
		x0 = _mm_loadu_ps(x+i);
		x1 = _mm_loadu_ps(x+i+4);
		y0 = _mm_loadu_ps(y+i);
		y1 = _mm_loadu_ps(y+i+4);

		// Shuffles
		l0 = _mm_shuffle_ps(x0, x1, _MM_SHUFFLE(2,0,2,0));
		h0 = _mm_shuffle_ps(x0, x1, _MM_SHUFFLE(3,1,3,1));
		l1 = _mm_shuffle_ps(y0, y1, _MM_SHUFFLE(2,0,2,0));
		h1 = _mm_shuffle_ps(y0, y1, _MM_SHUFFLE(3,1,3,1));

		//Mults
		h0l1 = _mm_mul_ps(h0, l1);
		l1l0 = _mm_mul_ps(l1, l0);
		h0h1 = _mm_mul_ps(h0, h1);
		h1l0 = _mm_mul_ps(h1, l0);

		mh0h1 = _mm_mul_ps(h0h1, mask);

		//Adds
		a0 = _mm_add_ps(l1l0, mh0h1);
		a1 = _mm_add_ps(h0l1, h1l0);

		//Shuffles
		z0 = _mm_unpacklo_ps(a0, a1);
		z1 = _mm_unpackhi_ps(a0, a1);

		//Stores
		_mm_storeu_ps(z+i, z0);
		_mm_storeu_ps(z+i+4, z1);

	}
}

void simd_ceil (float * m, size_t n)
{
	int i; size_t size = n * n;
	__m128 mask1 = _mm_set1_ps(1.0);
	__m128 mask2 = _mm_set1_ps(2.0);
	__m128 mask3 = _mm_set1_ps(3.0);

	for (i = 0; i < size / 4; i++) {
		__m128 op = _mm_loadu_ps(m + i*4);
		//get locations <= 1
		__m128 c1 = _mm_cmple_ps(op, mask1);
		//store 1 in locations <= 1
		__m128 l1 = _mm_and_ps(c1, mask1);

		// get the locations <= 2
		__m128 c2 = _mm_cmple_ps(op, mask2);
		// we need to remove the locations less than 1, take xor with c1
		c2 =  _mm_xor_ps(c2,c1);
		//store 2 in locations <= 2
		__m128 l2 = _mm_and_ps(c2, mask2);

		// get locations > 2
		__m128 c3 = _mm_cmpgt_ps(op, mask2);
		// store 3 in locations <= 3
		__m128 l3 = _mm_and_ps(c3, mask3);
		// add up l1, l2, l3
		__m128 res = _mm_add_ps(l1, l2);
		res = _mm_add_ps(res, l3);
		// store the result
		_mm_storeu_ps(m + i*4, res);
	}
}

